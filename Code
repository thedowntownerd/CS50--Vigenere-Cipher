//program to implement vigenere cipher technique. Acceptable input is command line argument in form of a keyword i.e. a string
#include <cs50.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>

//function to swap char with their int equivalent for crypto
int shift(char c);    
int main(int argc, string argv[])
{
    //checking if a command line input is provided or not
    if (argc != 2)
    {
        printf("Usage: ./vigenere keyword\n");
        return 1;
    }
    int key_len = strlen(argv[1]);
    //checking input doesn't have any numeric value & is alphabetic, else exiting
    for (int i = 0; i < key_len; i++)
    {
        if (!isalpha(argv[1][i]))
        {
            printf("Usage: ./vigenere keyword\n");
            return 1;
        }
    }
    int key;
    char *plain = get_string("plaintext: ");
    printf("ciphertext: ");
    int i = 0;    //indexing counter for moving along the key
    //moving through the plaintext, converting each alphabet with its corresponding key value
    for (int j = 0, len = strlen(plain); j < len; j++)
    {
        int pt = (int) plain[j];
        //using function to get the int equivalent of key while ensuring it's wrapped as per length
        key = shift(argv[1][i % key_len]);
        if (isupper(plain[j]))
        {
            char newC = (((((pt - 65) + key) % 26) + 65));
            printf("%c", newC);
        }
        else if (islower(plain[j]))
        {
            char newC = (((((pt - 97) + key) % 26) + 97));
            printf("%c", newC);
        }
        else
        {
            char newC = plain[j];
            printf("%c", newC);
        }
        i++; //incrementing the index of key
    }
    
    
    printf("\n");
}

int shift(char c)
{
    int k;
    if (islower(c))
    {
        k = ((c - 97) % 26);
    }
    else if (isupper(c))
    {
        k = ((c - 65) % 26);
    }
    else
    {
        k = c; 
    }
    return (k); 
}

 
   
